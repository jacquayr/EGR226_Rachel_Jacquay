#include "msp432.h"

void DebounceSwitch1(const int delay);  // debounce function

int main(void) {
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;     // stop watchdog timer

    P3->SEL1 &= ~BIT7;      // configure P1.1 as I/O
    P3->SEL0 &= ~BIT7;
    P3->DIR &= ~BIT7;       // P1.1 set as input
    P3->REN |= BIT7;        // P1.1 pull up resistor enabled
    P3->OUT |= BIT7;        // pull up/down is selected by P1 -> OUT

    P2->SEL1 &= ~BIT7;      // configure as I/O
    P2->SEL0 &= ~BIT7;
    P2->DIR |= BIT7;
    P2->OUT &= ~BIT7;       // set as output pin

    P2->SEL1 &= ~BIT6;      // configure as I/O
    P2->SEL0 &= ~BIT6;
    P2->DIR |= BIT6;
    P2->OUT &= ~BIT6;       // set as output pin

    P2->SEL1 &= ~BIT4;      // configure as I/O
    P2->SEL0 &= ~BIT4;
    P2->DIR |= BIT4;
    P2->OUT &= ~BIT4;       // set as output pin

    int i = 0;              // index variable

    while (1) {
        if ((P3->IN & BIT7) != BIT7) {          // if switch is pressed
            DebounceSwitch1(500);               // debounce function call

            if ((P3->IN & BIT7) == BIT7) {      // if switch is pressed still
                i++;                            // increment i by 1
            }
        }
                if (i == 0) {                   // if i equals 0 (starting case)
                    P2->OUT &= ~BIT7;           // set all LEDs to OFF
                    P2->OUT &= ~BIT6;
                    P2->OUT &= ~BIT4;
                }

                else if (i == 1) {              // if i equals 1 (red LED case)
                    P2->OUT |= BIT7;            // turn red LED on
                    P2->OUT &= ~BIT6;           // turn other LEDs off
                    P2->OUT &= ~BIT4;
                }

                else if (i == 2) {              // if i equals 2 (green LED case)
                    P2->OUT |= BIT6;            // turn yellow LED on
                    P2->OUT &= ~BIT7;           // turn other LEDs off
                    P2->OUT &= ~BIT4;
                }

                else if (i == 3) {              // if i equals 3 (blue LED case)
                    P2->OUT |= BIT4;            // turn green LED on
                    P2->OUT &= ~BIT6;           // turn other LEDs off
                    P2->OUT &= ~BIT7;
                }

                else {                          // anything other than 0 through 3
                    i = 1;                      // go back to red LED case
                }

            }
        }

/*--------------------------------------------------------------
 * Function:        DebounceSwitch1
 * Description:     Add a delay to make sure the button is
 *                  being pressed and not just bouncing.
 *
 * Inputs:          (const int) delay: integer to set the
 *                  length of the timer delay
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void DebounceSwitch1(const int delay) {     // debounce function
    int i;                                  // index variable
    for(i = 0; i < delay; i++)              // cycles through the __delay_cycles function for delay amount
        __delay_cycles(1);                  // delays input
}
