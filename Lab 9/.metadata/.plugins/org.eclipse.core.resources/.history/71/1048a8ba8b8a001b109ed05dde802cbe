/*-----------------------------------------------------------------------------------------
 * Author:          Rachel Jacquay
 * Course:          EGR 226-902
 * Date:            03/24/2021
 * Project:         Lab 9 Part 2
 * File:            main_part2.c
 * Description:
-----------------------------------------------------------------------------------------*/

// libraries
#include "msp.h"
#include <stdio.h>

// function prototypes
void pin_init(void);
void SysTick_Init(void);
void SysTick_Delay(void);
void changeCase(void);

volatile uint32_t count = 0;    // volatile global variable

void main(void)
{
    __disable_irq();                                // disable interrupts
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;		// stop watchdog timer
    SysTick_Init();                                 // initializations
    pin_init();
    __enable_irq();                                 // enable interrupts

    while (1) {
        changeCase();           // call change case function

        if (count > 9) {        // if count is larger than 9
            count = 0;          // reset to 0 to restart
        }
    }
}

/*--------------------------------------------------------------
 * Function:        SysTick_Init
 *
 * Description:     Initialize the SysTick delay component.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Init(void) {
    SysTick->CTRL = 0;              // disable SysTick during step
    SysTick->LOAD = 0x00FFFFFF;     // max reload value
    SysTick->VAL = 0;               // any write to current value clears it
    SysTick->CTRL = 0x00000007;     // enable SysTick (3 MHz) -> YES TO INTERRUPTS
}


/*--------------------------------------------------------------
 * Function:        SysTick_Delay
 *
 * Description:     Add a delay to make sure the button is
 *                  being pressed and not just bouncing.
 *
 * Inputs:          (unsigned 16-bit int) delay: integer to set the
 *                  length of the timer delay
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Delay(void) {
    SysTick->LOAD = 3000000 - 1;                    // delay for 1 SECOND
    SysTick->VAL = 0;                               // any write to current value clears it
    while ((SysTick->CTRL & 0x00010000) == 0);      // wait for flag to be set
}

/*--------------------------------------------------------------
 * Function:        pin_init
 *
 * Description:
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void pin_init(void) {
    P4->SEL0 &= ~0x7F;      // set as simple I/O
    P4->SEL1 &= ~0x7F;
    P4->DIR |= 0x7F;        // set to output
    P4->OUT &= ~0x7F;       // set to low
}

/*--------------------------------------------------------------
 * Function:        changeCase
 *
 * Description:     This function changes the case based on the
 *                  count variable value and turns certain bits
 *                  on so that the number work in order.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void changeCase(void) {
    switch (count) {        // switch statement
    case 0 :                // case for 0
        P4->OUT |= 0x3F;    // turn on certain bits
        SysTick_Delay();    // delay 1 sec
        P4->OUT &= ~0x7F;   // turn all off
        break;              // break

    case 1 :                // case for 1
        P4->OUT |= 0x06;    // turn on certain bits
        SysTick_Delay();    // delay 1 sec
        P4->OUT &= ~0x7F;   // turn all off
        break;              // break

    case 2 :
        P4->OUT |= 0x5B;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    case 3 :
        P4->OUT |= 0x4F;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    case 4 :
        P4->OUT |= 0x66;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    case 5 :
        P4->OUT |= 0x6D;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    case 6 :
        P4->OUT |= 0x7D;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    case 7 :
        P4->OUT |= 0x07;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    case 8 :
        P4->OUT |= 0x7F;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    case 9 :
        P4->OUT |= 0x6F;
        SysTick_Delay();
        P4->OUT &= ~0x7F;
        break;

    default :
        P4->OUT &= ~0x7F;
        SysTick_Delay();
        count = 0;
    }
}

/*--------------------------------------------------------------
 * Function:        SysTick_Handler
 *
 * Description:     This function deals with the SysTick
 *                  interrupt and increases the overall count.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Handler(void) {
    count++;
}
