#include "msp.h"
#include <stdio.h>

void Keypad_Init(void);
uint8_t Read_Keypad(void);
void Print_Keys(void);
void SysTick_Init(void);
void SysTick_Delay(uint16_t delay);

uint8_t num, pressed;

void main(void) {
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;
    Keypad_Init();
    SysTick_Init();

    while(1) {
        pressed = Read_Keypad();
        if (pressed) {
            Print_Keys();
            __delay_cycles(30000);
        }
    }
}

void Keypad_Init(void) {

}

uint8_t Read_Keypad(void) {
    uint8_t col, row;

    for (col = 0; col < 3; col++) {
        P4->DIR = 0x00;
        P4->DIR |= BIT(4 + col);
        P4->OUT &= ~BIT(4 + col);

        SysTick_Delay(10);
    }
}

/*--------------------------------------------------------------
 * Function:        Print_Keys
 * Description:     Print the keys that were pressed from the
 *                  keypad.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void Print_Keys(void) {

}

/*--------------------------------------------------------------
 * Function:        SysTick_Init
 * Description:     Initialize the SysTick delay component.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Init(void) {
    SysTick->CTRL = 0;              // disable SysTick during step
    SysTick->LOAD = 0x00FFFFFF;     // max reload value
    SysTick->VAL = 0;               // any write to current value clears it
    SysTick->CTRL = 0x00000005;     // enable SysTick (3 MHz) -> no interrupts
}

/*--------------------------------------------------------------
 * Function:        SysTick_Delay
 * Description:     Add a delay to make sure the button is
 *                  being pressed and not just bouncing.
 *
 * Inputs:          (unsigned 16-bit int) delay: integer to set the
 *                  length of the timer delay
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Delay(uint16_t delay) {
    SysTick->LOAD = ((delay * 3000) - 1);           // delay for 1 millisecond per delay value
    SysTick->VAL = 0;                               // any write to current value clears it
    while ((SysTick->CTRL & 0x00010000) == 0);      // wait for flag to be set
}
