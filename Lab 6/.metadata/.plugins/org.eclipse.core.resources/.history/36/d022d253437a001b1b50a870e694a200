#include "msp.h"
#include <stdio.h>

// function prototypes
void Keypad_Init(void);
uint8_t Read_Keypad(void);
void Print_Keys(void);
void SysTick_Init(void);
void SysTick_Delay(uint16_t delay);

// global variables
uint8_t num, pressed;

void main(void) {
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;                 // pause watchdog timer
    Keypad_Init();                                              // call keypad initialization function
    SysTick_Init();                                             // call systick initialization function
    int counter = 0;
    int array[1000];

    printf("Please enter 4 numbers and then press [#]:\n");     // tell user to input 4 numbers then press #

    while(1) {                                  // always
        pressed = Read_Keypad();                // call read keypad function then return either 0 for not pressed or 1 for pressed
        if (pressed) {                          // if a 1 is returned and a key is pressed
            Print_Keys();                       // print out the key
            SysTick_Delay(1);                   // delay for 1 millisecond


            if (num != 10 && num != 12) {       // if key pressed is not * or #
                if (num == 11) {                // value 11 is turned into a 0
                    num = 0;
                }

                array[counter] = num;           // set the array value equal to the num value
                counter++;                      // increase counter
            }

            if (counter > 999) {                                        // if counter has too many entries
                printf("Too many entries without pressing [#]\n");      // tell user
                main();                                                 // call main again to restart program
            }
        }

        if (num == 12) {                // if 12 (#) is pressed,
            if (counter >= 4) {         // if user input 4 or more values
                printf("%d %d %d %d\n", array[counter - 4], array[counter - 3], array[counter - 2], array[counter - 1]);        // print 4 value code out
                counter = 0;            // reset counter and num to 0
                num = 0;
            }

            else {
                printf("Please enter more numbers and then enter [#]\n");
                num = 0;
            }
        }
    }
}



/*--------------------------------------------------------------
 * Function:        Read_Keypad
 * Description:     Read the keys that are being pressed on the
 *                  keypad.
 *
 * Inputs:          none
 *
 * Outputs:         (unsigned 8-bit int): integer returned
 *                  to main.c that tells the program if the keys
 *                  are being pressed
 *-------------------------------------------------------------*/
uint8_t Read_Keypad(void) {
    uint8_t col, row;

    for (col = 0; col < 3; col++) {
        P4->DIR = 0x00;
        P4->DIR |= BIT(4 + col);
        P4->OUT &= ~BIT(4 + col);

        SysTick_Delay(10);
        row = P4->IN & 0x0F;

        while ( !(P4IN & BIT0) | !(P4IN & BIT1) | !(P4IN & BIT2) | !(P4IN & BIT3) );

        if (row != 0x0F)
            break;
    }

    P2->DIR = 0x00;

    if (col == 3)
        return 0;

    if (row == 0x0E)
        num = col + 1;
    if (row == 0x0D)
        num = 3 + col + 1;
    if (row == 0x0B)
        num = 6 + col + 1;
    if (row == 0x07)
        num = 9 + col + 1;

    return 1;
}


/*--------------------------------------------------------------
 * Function:        Print_Keys
 * Description:     Print the keys that were pressed from the
 *                  keypad.
 *
 * Inputs:          (unsigned 8-bit int) value: the number that
 *                  was pressed on the keypad
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void Print_Keys(void) {
    if (num >= 1 && num <= 9) {
        printf("[%d]\n", num);
    }

    if (num == 10) {
        printf("[*]\n");
    }

    if (num == 11) {
        printf("[0]\n");
    }

    if (num == 12) {
        printf("[#]\n");
    }
}


/*--------------------------------------------------------------
 * Function:        Keypad_Init
 * Description:     Initialize the keypad for use.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void Keypad_Init(void) {
    P4->SEL0 &= ~0x7F;
    P4->SEL1 &= ~0x7F;
    P4->DIR &= ~0x7F;
    P4->REN |= 0x0F;
    P4->OUT |= 0x0F;
}


/*--------------------------------------------------------------
 * Function:        SysTick_Init
 * Description:     Initialize the SysTick delay component.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Init(void) {
    SysTick->CTRL = 0;              // disable SysTick during step
    SysTick->LOAD = 0x00FFFFFF;     // max reload value
    SysTick->VAL = 0;               // any write to current value clears it
    SysTick->CTRL = 0x00000005;     // enable SysTick (3 MHz) -> no interrupts
}


/*--------------------------------------------------------------
 * Function:        SysTick_Delay
 * Description:     Add a delay to make sure the button is
 *                  being pressed and not just bouncing.
 *
 * Inputs:          (unsigned 16-bit int) delay: integer to set the
 *                  length of the timer delay
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Delay(uint16_t delay) {
    SysTick->LOAD = ((delay * 3000) - 1);           // delay for 1 millisecond per delay value
    SysTick->VAL = 0;                               // any write to current value clears it
    while ((SysTick->CTRL & 0x00010000) == 0);      // wait for flag to be set
}
