/*-----------------------------------------------------------------------------------------
 * Author:          Rachel Jacquay
 * Course:          EGR 226-902
 * Date:            03/17/2021
 * Project:         Lab 7 Part 1
 * File:            main_part1.c
 * Description:
-----------------------------------------------------------------------------------------*/

#include "msp.h"
#include <stdio.h>
#include <stdlib.h>

void SysTick_Init(void);
void LCD_Init(void);
void Pin_Init(void);
void delay_micro(uint32_t microsecond);
void delay_milli(uint32_t millisecond);
void PulseEnablePin(void);
void pushNibble(uint8_t nibble);
void pushByte(uint8_t byte);
void commandWrite(uint8_t command);
void dataWrite(uint8_t data);

void main(void)
{
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;		// stop watchdog timer
    SysTick_Init();                                 // initializations
    Pin_Init();
    LCD_Init();

    while (1) {

    }
}

/*--------------------------------------------------------------
 * Function:        SysTick_Init
 * Description:     This function initializes the SysTick
 *                  component of the code.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void SysTick_Init(void) {
    SysTick->CTRL = 0;
    SysTick->LOAD = 0x00FFFFFF;
    SysTick->VAL = 0;
    SysTick->CTRL = 0x00000005;
}

/*--------------------------------------------------------------
 * Function:        Pin_Init
 * Description:     This function initializes the pins on the
 *                  MSP432 that are connected to the LCD.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void Pin_Init(void) {
    // pin 3.0 = RS
    P3->SEL0 &= ~BIT0;
    P3->SEL1 &= ~BIT0;
    P3->DIR |= BIT0;
    P3->OUT &= ~BIT0;

    // pin 5.7 = E
    P5->SEL0 &= ~BIT7;
    P5->SEL1 &= ~BIT7;
    P5->DIR |= BIT7;
    P5->OUT &= ~BIT7;

    // pin 1.6 = DB4
    P1->SEL0 &= ~BIT6;
    P1->SEL1 &= ~BIT6;
    P1->DIR |= BIT6;
    P1->OUT &= ~BIT6;

    // pin 1.7 = DB5
    P1->SEL0 &= ~BIT7;
    P1->SEL1 &= ~BIT7;
    P1->DIR |= BIT7;
    P1->OUT &= ~BIT7;

    // pin 5.0 = DB6
    P5->SEL0 &= ~BIT0;
    P5->SEL1 &= ~BIT0;
    P5->DIR |= BIT0;
    P5->OUT &= ~BIT0;

    // pin 5.2 = DB7
    P5->SEL0 &= ~BIT2;
    P5->SEL1 &= ~BIT2;
    P5->DIR |= BIT2;
    P5->OUT &= ~BIT2;

    delay_milli(60);
}

/*--------------------------------------------------------------
 * Function:        delay_micro
 * Description:
 *
 * Inputs:          (unsigned 32 bit integer) microsecond: this
 *                  variable takes in a number from the user
 *                  and converts it to a delay in milliseconds
 *                  that is used in the program
 *
 * Outputs:
 *-------------------------------------------------------------*/
void delay_micro(uint32_t microsecond) {
    SysTick->LOAD = ((microsecond * 3) - 1);
    SysTick->VAL = 0;
    while((SysTick->CTRL & 0x00010000) == 0);
}

/*--------------------------------------------------------------
 * Function:        delay_milli
 * Description:     (unsigned 32 bit integer) millisecond: this
 *                  variable takes in a number from the user
 *                  and converts it to a delay in milliseconds
 *                  that is used in the program
 *
 * Inputs:
 *
 * Outputs:
 *-------------------------------------------------------------*/
void delay_milli(uint32_t millisecond) {
    SysTick->LOAD = ((delay * 3000) - 1);           // delay for 1 millisecond per delay value
    SysTick->VAL = 0;                               // any write to current value clears it
    while ((SysTick->CTRL & 0x00010000) == 0);      // wait for flag to be set
}

/*--------------------------------------------------------------
 * Function:
 * Description:
 *
 * Inputs:
 *
 * Outputs:
 *-------------------------------------------------------------*/
void PulseEnablePin(void) {
    P5OUT &= ~BIT7;
    delay_micro(50);

    P5OUT |= BIT7;
    delay_micro(50);

    P5OUT &= ~BIT7;
    delay_micro(50);
}

/*--------------------------------------------------------------
 * Function:
 * Description:
 *
 * Inputs:
 *
 * Outputs:
 *-------------------------------------------------------------*/
void pushNibble(uint8_t nibble) {
    P1OUT &= ~0x40;
    P1OUT &= ~0x80;
    P5OUT &= ~0x01;
    P5OUT &= ~0x04;

    // DB4
    if (nibble & BIT0) {
        P1->OUT |= 0x40;
    }

    // DB5
    delay_micro(50);
    if (nibble & BIT1) {
        P1->OUT |= 0x80;
    }

    // DB6
    delay_micro(50);
    if (nibble & BIT2) {
        P5->OUT |= 0x01;
    }

    // DB7
    delay_micro(50);
    if (nibble & BIT3) {
        P5->OUT |= 0x04;
    }

    delay_micro(50);
    PulseEnablePin();
}

/*--------------------------------------------------------------
 * Function:
 * Description:
 *
 * Inputs:
 *
 * Outputs:
 *-------------------------------------------------------------*/
void pushByte(uint8_t byte) {
    uint8_t nibble;

    nibble = (byte & 0xF0) >> 4;
    pushNibble(nibble);
    nibble = byte & 0x0F;
    pushNibble(nibble);
    delay_micro(100);
}

/*--------------------------------------------------------------
 * Function:
 * Description:
 *
 * Inputs:
 *
 * Outputs:
 *-------------------------------------------------------------*/
void LCD_Init(void) {
    commandWrite(0x3);
    delay_milli(100);
    commandWrite(0x3);
    delay_milli(200);
    commandWrite(0x3);
    delay_milli(100);
    commandWrite(0x2);

    delay_milli(100);
    commandWrite(0x28);
    delay_milli(100);

    delay_milli(100);
    commandWrite(0x0F);
    delay_milli(100);
    commandWrite(0x01);
    delay_milli(100);
    commandWrite(0x06);
    delay_milli(10);
}

/*--------------------------------------------------------------
 * Function:
 * Description:
 *
 * Inputs:
 *
 * Outputs:
 *-------------------------------------------------------------*/
void commandWrite(uint8_t command) {
    P3->OUT &= ~BIT0;
    pushByte(command);
}

/*--------------------------------------------------------------
 * Function:
 * Description:
 *
 * Inputs:
 *
 * Outputs:
 *-------------------------------------------------------------*/
void dataWrite(uint8_t data) {
    P3->OUT |= BIT0;
    pushByte(data);
}
