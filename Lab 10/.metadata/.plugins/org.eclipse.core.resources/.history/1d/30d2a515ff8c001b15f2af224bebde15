/*-----------------------------------------------------------------------------------------
 * Author:          Rachel Jacquay
 * Course:          EGR 226-902
 * Date:            04/04/2021
 * Project:         Lab 10 Part 3
 * File:            main_part3.c
 * Description:
-----------------------------------------------------------------------------------------*/

#include "msp.h"
#include <stdio.h>
#include <stdlib.h>
#include "SysTick.h"
#include "LCD.h"
#include <string.h>

// initializations
void ADCsetup(void);
void SysTick_Init(void);
void LCD_Init(void);
void Pin_Init(void);

// delays
void delay_micro(uint32_t microsecond);
void delay_milli(uint32_t millisecond);

// misc
void PulseEnablePin(void);
void pushNibble(uint8_t nibble);
void pushByte(uint8_t byte);

// writes
void commandWrite(uint8_t command);
void dataWrite(uint8_t data);

void firstline(void);

double result = 0;
double voltage = 0;
double celc = 0;
double fahr = 0;

void main(void)
{
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;     // stop watchdog timer
    SysTick_Init();                                 // initializations
    ADCsetup();
    LCD_Init();
    Pin_Init();

    while(1) {
        ADC14->CTL0 |= 1;                               // start conversion

        while(!ADC14->IFGR0);                           // wait until conversion is complete
        result = ADC14->MEM[5];                         // immediately store value in variable
        voltage = result * 0.0002;

        celc = (voltage - 0.5) / (0.01);
        fahr = (celc * (9.0/5.0) + 32);

        commandWrite(0x01);
        delay_milli(500);

        firstline();

        printf("Celcius value is: \n\t %.2lf\n", celc);      // print value
        printf("Fahrenheit value is: \n\t %.2lf\n", fahr);

        SysTick_Delay(500);                         // delay 500 ms
    }
}

/*--------------------------------------------------------------
 * Function:        ADCsetup
 *
 * Description:     This function
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void ADCsetup(void) {
    ADC14->CTL0 = 0x00000010;       // power on & disabled during config
    ADC14->CTL0 |= 0x04D80300;      // S/H pulse mode, MCLK, 32 sample clocks, SW trigger, /4 clock divide

    ADC14->CTL1 = 0x00000030;       // 14-bit resolution
    ADC14->MCTL[5] = 0;             // A0 input, single ended, vref = avcc

    P5->SEL1 |= BIT5;               // configure P5.5 for AO
    P5->SEL0 |= BIT5;

    ADC14->CTL1 |= 0x00050000;      // start converting at mem reg 5
    ADC14->CTL0 |= 2;               // enable ADC after config
}

/*--------------------------------------------------------------
 * Function:        firstline
 *
 * Description:     This function
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void firstline(void) {
    int i;
    char line1[16];
    strcpy(line1, "Current temp is:");

    commandWrite(0x80);
    delay_milli(10);

    for (i = 0; i < 16; i++) {
        dataWrite(line1[i]);
        delay_milli(10);
    }
}
