/*-----------------------------------------------------------------------------------------
 * Author:          Rachel Jacquay
 * Course:          EGR 226-902
 * Date:            04/04/2021
 * Project:         Lab 10 Part 3
 * File:            main_part3.c
 * Description:
-----------------------------------------------------------------------------------------*/

#include "msp.h"
#include <stdio.h>
#include <stdlib.h>
#include "LCD.h"
#include <string.h>

// initializations
void ADCsetup(void);
void firstline(void);
void secondline(void);

double result = 0;
double voltage = 0;
double celc = 0;
//double fahr = 0;

void main(void)
{
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;     // stop watchdog timer
    SysTick_Init();                                 // initializations
    ADCsetup();
    Pin_Init();
    LCD_Init();

    commandWrite(0x01);
    delay_milli(500);

    commandWrite(0x0C);
    delay_milli(100);

    firstline();
    delay_micro(10);

    while(1) {
        ADC14->CTL0 |= 1;                               // start conversion

        while(!ADC14->IFGR0);                           // wait until conversion is complete

        result = ADC14->MEM[5];                         // immediately store value in variable
        voltage = result * 0.0002;
        celc = (voltage - 0.5) / (0.01);

        firstline();
        delay_micro(50);

        secondline();
        delay_micro(50);

        commandWrite(0x01);
        delay_milli(500);                         // delay 500 ms
    }
}

/*--------------------------------------------------------------
 * Function:        ADCsetup
 *
 * Description:     This function
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void ADCsetup(void) {
    ADC14->CTL0 = 0x00000010;       // power on & disabled during config
    ADC14->CTL0 |= 0x04D80300;      // S/H pulse mode, MCLK, 32 sample clocks, SW trigger, /4 clock divide

    ADC14->CTL1 = 0x00000030;       // 14-bit resolution
    ADC14->MCTL[5] = 0;             // A0 input, single ended, vref = avcc

    P5->SEL1 |= BIT5;               // configure P5.5 for AO
    P5->SEL0 |= BIT5;

    ADC14->CTL1 |= 0x00050000;      // start converting at mem reg 5
    ADC14->CTL0 |= 2;               // enable ADC after config
}

/*--------------------------------------------------------------
 * Function:        firstline
 *
 * Description:     This function
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void firstline(void) {
    int i;
    char line1[15];
    strcpy(line1, "Current temp is");

    commandWrite(0x80);
    delay_milli(100);

    for (i = 0; i < 15; i++) {
        dataWrite(line1[i]);
        delay_milli(10);
    }
}

/*--------------------------------------------------------------
 * Function:        secondline
 *
 * Description:     This function
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void secondline(void) {
    char temp[10];
    char letter[1];

    commandWrite(0xC3);
    delay_milli(10);

    sprintf(temp, "%lf", celc);
    printf("%s", temp);

    dataWrite(0xDF);
    delay_milli(10);

    sprintf(letter, "F");
    printf("%s", letter);
}
