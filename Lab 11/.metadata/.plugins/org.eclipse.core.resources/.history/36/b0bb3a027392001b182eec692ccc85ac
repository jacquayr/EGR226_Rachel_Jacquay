/*-----------------------------------------------------------------------------------------
 * Author:          Rachel Jacquay
 * Course:          EGR 226-902
 * Date:            04/04/2021
 * Project:         Lab 11 Part 1
 * File:            main_part1.c
 * Description:
-----------------------------------------------------------------------------------------*/

#include "msp.h"
#include "stdio.h"

void TA0_N_IRQHandler(void);

double currentedge = 0;
double period = 0;
double lastedge = 0;

void main(void)
{
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;		// stop watchdog timer

    P2->SEL0 |= BIT5;        // TA0.CC12A input capture pin, second function
    P2->SEL1 &= ~BIT5;       // TA0.CC12A input capture pin, second function
    P2-DIR &= ~BIT5;

    TIMER_A0->CTL |= 0x0214;        // SMCLK source, UP mode, clear TA0R
    TIMER_A0_CCTL[2] |= 0x4910;     // capture rising edge, use CC12A, enable capture interrupt
                                    // enable capture mode, synchronous capture

    NVIC_EnableIRQ(PORT2_IRQn);     // NVIC call
    __enable_irq();                 // enable irq

    while(1) {

    }
}

/*--------------------------------------------------------------
 * Function:
 *
 * Description:
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void TA0_N_IRQHandler(void) {           // timer A0 interrupt service routine
    TIMER_A0->CCTL[2] &= ~1;

    currentedge = TIMER_A0->CCR[2];
    period = currentedge - lastedge;    // won't work correctly on the first try
    lastedge = currentedge;

    if ()
    TIMER_A0->CCTL[2] &= ~(TIMER_A_CCTLN_CCIFG);    // clear interrupt flag
}
