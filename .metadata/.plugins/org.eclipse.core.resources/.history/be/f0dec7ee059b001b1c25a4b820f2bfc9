/*-----------------------------------------------------------------------------------------
 * Author:          Rachel Jacquay
 * Course:          EGR 226-902
 * Date:            04/21/2021
 * Project:         Final Project
 * File:            main.c
 * Description:
-----------------------------------------------------------------------------------------*/

// ADD PORT 4 INTERRUPTS FOR KEYPAD !!!!!!!!!!!!!

#include "msp.h"
#include "Keypad.h"
#include "LCD.h"
#include "SysTick.h"
#include <stdlib.h>
#include <stdio.h>

void changeCase(void);
void mainMenu(void);
void doorMenu(void);
void motorMenu(void);
void LED_init(void);
void DC_init(void);

uint8_t count, push, flag, Kflag;
char opened[11] = "Door Opened";
char closed[11] = "Door Closed";
int i;

void main(void)
{
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;		// stop watchdog timer
    SysTick_Init();
    Pin_Init();         // HAS TO GO BEFORE LCD INIT
    LCD_Init();
    Keypad_Init();
    LED_init();
    DC_init();

    commandWrite(0x01);     // clear screen
    delay_milli(500);       // delay 500 ms

    commandWrite(0x0C);     // turn cursor off
    delay_milli(10);        // delay 100 ms

    count = 0;
    push = 0;
    changeCase();

    while(1) {
        pressed = Read_Keypad();

        if (pressed) {
            Print_Keys();
            SysTick_Delay(1);

            if (num == 1) {
                count = 1;
                changeCase();
            }

            else if (num == 2) {                          // if num val is 10
                count = 4;
                changeCase();
            }

            else if (num == 3) {                          // if num val is 11
                count = 0;
                changeCase();
            }
        }
    }
}

/*--------------------------------------------------------------
 * Function:        changeCase
 *
 * Description:     This function changes the case based on the
 *                  count variable value.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void changeCase(void) {
    switch (count) {        // switch statement
    case 0 :
        mainMenu();
        break;

    case 1 :                // door menu
        doorMenu();
        break;

    case 2 :                // open door
        P1->OUT &= ~BIT0;   // green LED on, red LED off
        P2->OUT |= BIT1;
        count = 0;
        break;

    case 3 :                // close door
        P2->OUT &= ~BIT1;   // red LED on, green LED off
        P1->OUT |= BIT0;
        count = 0;
        break;

    case 4 :
        motorMenu();
        break;

    default :               // default case
        mainMenu();
        break;
    }
}

/*--------------------------------------------------------------
 * Function:        mainMenu
 *
 * Description:     This function shows the main menu screen.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void mainMenu(void) {
    int i;
    char first[16] = "Main Menu:      ";
    char second[16] = "[1] Door Menu   ";
    char third[16] = "[2] Motor Menu  ";
    char fourth[16] = "[3] Lights Menu ";

    commandWrite(0x80);             // send cursor to first line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(first[i]);        // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0xC0);             // send cursor to second line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(second[i]);       // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0x90);             // send cursor to third line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(third[i]);        // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0xD0);             // send cursor to fourth line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(fourth[i]);       // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    push = Read_Keypad();

    while (push) {
        if (num == 1) {    // door menu
            count = 1;
        }

        else if (num == 2) {   // motor menu
            count = 4;
        }

        else if (num == 3) {   // lights menu
            count = 0;
        }

        push = 0;
    }
}

/*--------------------------------------------------------------
 * Function:        doorMenu
 *
 * Description:     This function shows the door menu screen.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void doorMenu(void) {
    int i;
    char first[16] = "Door Menu:      ";
    char second[16] = "[1] Open Door   ";
    char third[16] = "[2] Close Door  ";
    char fourth[16] = "                ";

    //commandWrite(0x01);     // clear screen
    //delay_milli(500);       // delay 500 ms

    commandWrite(0x80);             // send cursor to first line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(first[i]);        // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0xC0);             // send cursor to second line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(second[i]);       // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0x90);             // send cursor to third line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(third[i]);        // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0xD0);             // send cursor to fourth line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(fourth[i]);       // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    push = Read_Keypad();

    while (push) {
        if (num == 1) {        // user wants to open door
            count = 1;
        }

        else if (num == 2) {   // user wants to close door
            count = 2;
        }

        push = 0;
    }
}

/*--------------------------------------------------------------
 * Function:        LED_init
 *
 * Description:     This function initializes the red and green
 *                  LEDs for the door.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void LED_init(void) {
    // red LED = P1.0
    P1->SEL0 &= ~BIT0;
    P1->SEL1 &= ~BIT0;
    P1->DIR |= BIT0;
    P1->OUT |= BIT0;

    // green LED = P2.1
    P2->SEL0 &= ~BIT1;
    P2->SEL1 &= ~BIT1;
    P2->DIR |= BIT1;
    P2->OUT &= ~BIT1;
}

/*--------------------------------------------------------------
 * Function:        DC_init
 *
 * Description:     This function initializes the DC motor.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void DC_init(void) {
    P2->SEL0 |= BIT7;   // configure P2.7 for PWM
    P2->SEL1 &= ~BIT7;
    P2->DIR |= BIT7;

    // TimerA 0.4 for P2.7
    TIMER_A0->CCR[0] |= period;                     // set period amount
    TIMER_A0->CCTL[4] |= TIMER_A_CCTLN_OUTMOD_7;    // set to outmode 7
    TIMER_A0->CCR[4] = DC;                          // set duty cycle
    TIMER_A0->CTL |= 0x0214;                        // set to SMCLK, up mode, clear TAR to start

    P4->SEL0 &= ~0x7F;      // enable simple I/O
    P4->SEL1 &= ~0x7F;
    P4->DIR &= ~0x7F;       // set as input
    P4->REN |= 0x0F;        // enable resistor
    P4->OUT |= 0x0F;        // enable pull up resistor
}

/*--------------------------------------------------------------
 * Function:        keypad
 *
 * Description:     This function reads the keypad and prints out
 *                  the pressed key, but then sets the pushed
 *                  variable equal to the number pressed.
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void keypad(void) {
    pressed = Read_Keypad();
    if (pressed) {               // if a 1 is returned
        Print_Keys();            // call print keys function with num variable
        SysTick_Delay(100);      // delay

        push = num;
        pressed = 0;
    }
}

/*--------------------------------------------------------------
 * Function:
 *
 * Description:
 *
 * Inputs:          none
 *
 * Outputs:         none
 *-------------------------------------------------------------*/
void motorMenu(void) {
    int i;
    char first[16] = "Motor Menu:     ";
    char second[16] = "[0-9] 0%-90%    ";
    char third[16] = "[*] 100%        ";
    char fourth[16] = "[#] E-Stop      ";

    //commandWrite(0x01);     // clear screen
    //delay_milli(500);       // delay 500 ms

    commandWrite(0x80);             // send cursor to first line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(first[i]);        // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0xC0);             // send cursor to second line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(second[i]);       // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0x90);             // send cursor to third line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(third[i]);        // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    commandWrite(0xD0);             // send cursor to third line
    delay_milli(10);                // delay 10 ms

    for (i = 0; i < 16; i++) {
        dataWrite(fourth[i]);        // print out each letter
        delay_milli(10);            // delay 10 ms
    }

    push = Read_Keypad();

    while (push) {

    }
}
